#usda 1.0

def Group "world"
{
    def Group "geometry"
    {
        def Group "primitives"
        {
            def Group "spheres"
            {
                def Sphere "leftWall"
                {
                    double radius = 1000
                    float3 position = (-1003, 0, 0)
                    string material = "redWall"

                    float3[] extent = [(-1000, -1000, -1000), (1000, 1000, 1000)]
                    double3 xformOp:translate = (-1003, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "rightWall"
                {
                    double radius = 1000
                    float3 position = (1003, 0, 0)
                    string material = "greenWall"

                    float3[] extent = [(-1000, -1000, -1000), (1000, 1000, 1000)]
                    double3 xformOp:translate = (1003, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "backWall"
                {
                    double radius = 1000
                    float3 position = (0, 0, 1020)
                    string material = "greyWall"

                    float3[] extent = [(-1000, -1000, -1000), (1000, 1000, 1000)]
                    double3 xformOp:translate = (0, 0, 1020)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "frontWall"
                {
                    double radius = 1000
                    float3 position = (0, 0, -1003)
                    string material = "greyWall"

                    float3[] extent = [(-1000, -1000, -1000), (1000, 1000, 1000)]
                    double3 xformOp:translate = (0, 0, -1003)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "floor"
                {
                    double radius = 1000
                    float3 position = (0, -1000.4, 0)
                    string material = "greyWall"

                    float3[] extent = [(-1000, -1000, -1000), (1000, 1000, 1000)]
                    double3 xformOp:translate = (0, -1000.4, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "roof"
                {
                    double radius = 1000
                    float3 position = (0, 1004.7, 0)
                    string material = "greyWall"

                    float3[] extent = [(-1000, -1000, -1000), (1000, 1000, 1000)]
                    double3 xformOp:translate = (0, 1004.7, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "leftSphere"
                {
                    double radius = 1
                    float3 position = (-1.35, 0.6, -0.5)
                    string material = "whiteSphere"

                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    double3 xformOp:translate = (-1.35, 0.6, -0.5)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "rightSphere"
                {
                    double radius = 1
                    float3 position = (1.35, 0.6, 1.4)
                    string material = "whiteSphere"

                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    double3 xformOp:translate = (1.35, 0.6, 1.4)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

                def Sphere "lightSource"
                {
                    double radius = 100
                    float3 position = (0, 104.68, 1.4)

                    float3[] extent = [(-100, -100, -100), (100, 100, 100)]
                    double3 xformOp:translate = (0, 104.68, 1.4)
                    uniform token[] xformOpOrder = ["xformOp:translate"]
                }

            }
        }

        def Group "meshes"
        {

        }
    }

    def Group "lights"
    {
        def GeoLight "ceilingLight"
        {
            string geometry = "lightSource"
            string material = "light"
        }
    }

    def Group "materials"
    {
        def Material "redWall"
        {
            float3 color = (0.611, 0.0555, 0.062)
            float3 emissiveColor = (0, 0, 0)
            float3 fresnelColor = (0.04, 0.04, 0.04)
            float roughness = 1
            float metalness = 0
            float transmittance = 0
            float ior = 1
        }

        def Material "greenWall"
        {
            float3 color = (0.117, 0.4125, 0.115)
            float3 emissiveColor = (0, 0, 0)
            float3 fresnelColor = (0.04, 0.04, 0.04)
            float roughness = 1
            float metalness = 0
            float transmittance = 0
            float ior = 1
        }

        def Material "greyWall"
        {
            float3 color = (0.7295, 0.7355, 0.729)
            float3 emissiveColor = (0, 0, 0)
            float3 fresnelColor = (0.04, 0.04, 0.04)
            float roughness = 1
            float metalness = 0
            float transmittance = 0
            float ior = 1
        }

        def Material "whiteSphere"
        {
            float3 color = (1, 1, 1)
            float3 emissiveColor = (0, 0, 0)
            float3 fresnelColor = (0.04, 0.04, 0.04)
            float roughness = 1
            float metalness = 0
            float transmittance = 0
            float ior = 1
        }

        def Material "light"
        {
            float3 color = (0, 0, 0)
            float3 emissiveColor = (4.215, 2.69, 0.925)
            float3 fresnelColor = (0.04, 0.04, 0.04)
            float roughness = 1
            float metalness = 0
            float transmittance = 0
            float ior = 1
        }
    }

    def Camera "sceneCamera"
    {
        float3 position = (0, 2.9, 17)
        float yaw = 90
        float pitch = 2
        float fov = 45
        float apertureRadius = 0
        float focalDistance = 4

        float3 xformOp:translate = (0, 4, 15)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Settings "settings"
    {
        float3 skyColor = (0, 0, 0)
    }
}
